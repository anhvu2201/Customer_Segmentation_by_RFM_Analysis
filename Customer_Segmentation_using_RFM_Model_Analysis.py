# -*- coding: utf-8 -*-
"""Phan_Anh_VÅ©_RFM_analysis_project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JB02dTRGURSgJ261hEF_c5yJtgiqudPz

#**I. Preparation**
"""

from google.colab import drive
drive.mount('/content/drive')

pip install squarify

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import squarify

org_report = pd.read_excel('/content/drive/MyDrive/ecommerce_retail.xlsx')

"""#**II. EDA**"""

org_report.head()

org_report.info()

org_report.describe()

report_1 = org_report[(org_report['Country'] == 'United Kingdom') & (org_report['Quantity'] > 0) & (org_report['UnitPrice'] > 0)]

report_1.isnull().sum()

report_1 = report_1.dropna(subset=['CustomerID'])
report_1.info()

report_1['CustomerID'] = report_1['CustomerID'].astype(int)

report_1.nunique()

"""Conclusion:
- Missing Data:
  - 130802 rows in CustomerID
> **Next Step: Remove Missing Data**
- Duplicates:
  - No primal key found
> **Next Step: No Action**
- Incorrect Data Type:
  - Customer ID: float64 -> int64
> **Next Step: Change Data Type**
- Incorrect Value:
  - Negative values in Quantity
  - Negative values in UnitPrice
  - United Kingdom contributes mostly of the data
> **Next Step: Remove Negative Values & Filter Data From UK Only**

#**III. RFM Calculation**
"""

report_1.head()

"""##1. R-Calculation"""

report_1['DaySincePurchase'] = (pd.to_datetime('2011-12-31') - pd.to_datetime(report_1['InvoiceDate'])).dt.days
R_calc = report_1.groupby('CustomerID').agg({'DaySincePurchase': 'min'})
R_calc['R_score'] = pd.qcut(R_calc['DaySincePurchase'], 5, labels=['5', '4', '3', '2', '1'], duplicates='raise')

"""## 2. F-Calculation"""

F_calc = report_1.groupby('CustomerID').agg({'InvoiceNo': 'nunique'})
F_calc['Rank'] = F_calc['InvoiceNo'].rank(method='first')
F_calc['F_score'] = pd.qcut(F_calc['Rank'], 5, labels=['1', '2', '3', '4', '5'], duplicates='raise')

"""## 3. M-Calculation"""

report_1['Revenue'] = report_1['Quantity'] * report_1['UnitPrice']
M_calc = report_1.groupby('CustomerID').agg({'Revenue': 'sum'})
M_calc['M_score'] = pd.qcut(M_calc['Revenue'], 5, labels=['1', '2', '3', '4', '5'], duplicates='raise')

"""##4. RFM Calculation & Condition"""

RFM_calc_1 = pd.merge(R_calc, F_calc, on='CustomerID', how = 'left')
RFM_calc_2 = pd.merge(RFM_calc_1, M_calc, on='CustomerID', how = 'left')
RFM_calc_2 = RFM_calc_2.drop(columns=['Rank'])
RFM_calc_2 = RFM_calc_2[['DaySincePurchase', 'InvoiceNo', 'Revenue', 'R_score', 'F_score', 'M_score']]
RFM_calc_2 = RFM_calc_2.rename(columns={
        'DaySincePurchase': 'Recency',
        'InvoiceNo': 'Frequency',
        'Revenue': 'Monetary'})

RFM_calc_2['RFM_score'] = RFM_calc_2['R_score'].astype(str) + RFM_calc_2['F_score'].astype(str) + RFM_calc_2['M_score'].astype(str)
RFM_calc_2['RFM_score'] = RFM_calc_2['RFM_score'].astype(int)

conditions = [
    RFM_calc_2['RFM_score'].isin([555, 554, 544, 545, 454, 455, 445]),
    RFM_calc_2['RFM_score'].isin([543, 444, 435, 355, 354, 345, 344, 335]),
    RFM_calc_2['RFM_score'].isin([553, 551, 552, 541, 542, 533, 532, 531, 452, 451, 442, 441, 431, 453, 433, 432, 423, 353, 352, 351, 342, 341, 333, 323]),
    RFM_calc_2['RFM_score'].isin([512, 511, 422, 421, 412, 411, 311]),
    RFM_calc_2['RFM_score'].isin([525, 524, 523, 522, 521, 515, 514, 513, 425,424, 413,414,415, 315, 314, 313]),
    RFM_calc_2['RFM_score'].isin([535, 534, 443, 434, 343, 334, 325, 324]),
    RFM_calc_2['RFM_score'].isin([331, 321, 312, 221, 213, 231, 241, 251]),
    RFM_calc_2['RFM_score'].isin([255, 254, 245, 244, 253, 252, 243, 242, 235, 234, 225, 224, 153, 152, 145, 143, 142, 135, 134, 133, 125, 124]),
    RFM_calc_2['RFM_score'].isin([155, 154, 144, 214,215,115, 114, 113]),
    RFM_calc_2['RFM_score'].isin([332, 322, 233, 232, 223, 222, 132, 123, 122, 212, 211]),
    RFM_calc_2['RFM_score'].isin([111, 112, 121, 131,141,151])]
choices = [
    "Champions",
    "Loyal",
    "Potential Loyalist",
    "New Customers",
    "Promising",
    "Need Attention",
    "About To Sleep",
    "At Risk",
    "Cannot Lose Them",
    "Hibernating Customers",
    "Lost Customers"]
RFM_calc_2['CustomerSegment'] = np.select(conditions, choices)
RFM_calc_2.head(10)

"""#**IV. Visualization & Interpretation**

## 1. Distribution of Recency, Frequency & Monetary

### 1.1. Recency
"""

sns.set_theme(style="darkgrid")
plt.figure(figsize=(16, 8))
sns.histplot(RFM_calc_2['Recency'], bins=20, color='#0fbb98')
plt.title('Distribution of Recency', fontdict={'fontsize': 20, 'fontweight': 'bold'}, loc='center', pad=12)
plt.xlabel('Recency (Days)')
plt.ylabel('Number of Customer')
plt.show()

"""**Interpretation:**
- The distribution of Recency is right-skewed. As the Recency increases, there is a steep decline in the number of customers.
- The histogram indicates that most customers have made recent purchases (<=100 days). About 1,700 customers have already bought something at Superstore in the last 50 days.
> Most of the Superstore's customers are active customers who tend to make purchases recently.

### 1.2. Frequency
"""

plt.figure(figsize=(16, 4))
sns.histplot(RFM_calc_2['Frequency'], bins=20, color='#0fbb98')
plt.title('Distribution of Frequency', fontdict={'fontsize': 20, 'fontweight': 'bold'}, loc='center', pad=12)
plt.xlabel('Frequency (Number of Orders)')
plt.ylabel('Number of Customer')
plt.show()

plt.figure(figsize=(16, 4))
bin_ranges_F = [0, 10, 20, 30, 40]
sns.histplot(RFM_calc_2['Frequency'], bins=bin_ranges_F, color='#0fbb98')
plt.title('', pad=10)
plt.xlabel('Frequency (Number of Orders)')
plt.ylabel('Number of Customer')
plt.show()

"""**Interpretation:**
- The distribution of Frequency is highly right-skewed. As the Frequency increases, there is a significant drop in the number of customers.
- This 2nd historam indicates that most of customers have fewer than 20 transactions. For particular, more than 3,500 customers have made 1 to 10 purchases, when only few hundreds of customers have placed more than 10 orders and barely any have placed 20 or more.
> The majority of Superstore's customers are low-frequency purchasers who do not make purchases often.

### 1.3. Monetary
"""

plt.figure(figsize=(16, 4))
sns.histplot(RFM_calc_2['Monetary'], bins=20, color='#0fbb98')
plt.title('Distribution of Monetary', fontdict={'fontsize': 20, 'fontweight': 'bold'}, loc='center', pad=12)
plt.xlabel('Monetary Value')
plt.ylabel('Number of Customer')
plt.show()

plt.figure(figsize=(16, 4))
bin_ranges_M = [0, 5000, 10000, 15000, 20000]
sns.histplot(RFM_calc_2['Monetary'], bins=bin_ranges_M, color='#0fbb98')
plt.title('', pad=10)
plt.xlabel('Monetary Value')
plt.ylabel('Number of Customer')
plt.show()

"""**Interpretation:**
- The distribution of Monetary is highly right-skewed. As the Monetary increases, there is a significant drop in the number of customers.
- This 2nd historam indicates that most of customers have fewer than 10,000 monetary values. For particular, more than 3,500 customers have spent less than 5,000, when only hundreds of customers have spent more than 5,000. Virtually none have spent more than 10,000.
> Most of Superstore customers have low spending, while a small portion of customers contributes to the high monetary value segment.

## 2. Customer Segment Distribution by Number of Customer & Total Sales

### 2.1. Customer Segmentation By Total Sales
"""

plt.figure(figsize=(18, 9))
sizes = RFM_calc_2.groupby('CustomerSegment')['Monetary'].sum()
squarify.plot(sizes=sizes, label=sizes.index, alpha=.8, color=['silver', 'orange', 'magenta', 'red', 'green', 'blue', 'yellow', 'pink', 'gray', 'purple', 'cyan'])
plt.axis('off')
plt.title('Customer Segmentation By Total Sales',  fontdict={'fontsize': 20, 'fontweight': 'bold'}, loc='center', pad=12)
plt.show()

"""**Interpretation:**
Ranking the customer segmentation by total sales:
1. Champions
2. Loyal
3. At Risk
4. Need Attention
5. Hibernating Customers
6. Potential Loyalist
7. Cannot Lose Them
8. Lost Customers
9. Promising
10. About To Sleep
11. New Customers

### 2.2. Customer Segmentation by Number of Customer

#### 2.2.1. Customer Segmentation by Customer Volume
"""

plt.figure(figsize=(18, 9))
squarify.plot(sizes=RFM_calc_2['CustomerSegment'].value_counts(), label=RFM_calc_2['CustomerSegment'].value_counts().index, alpha=.8, color=['red', 'green', 'blue', 'yellow', 'orange', 'purple', 'pink', 'silver', 'gray', 'cyan', 'magenta'])
plt.axis('off')
plt.title('Customer Segmentation By Customer Volume',  fontdict={'fontsize': 20, 'fontweight': 'bold'}, loc='center', pad=12)
plt.show()

"""**Interpretation:**
Ranking the customer segmentation by customer volume:
1. Champions
2. Hibernating Customers
3. Lost Customers
4. Loyal
5. Potential Loyalist
6. At Risk
7. Need Attention
8. About To Sleep
9. New Customers
10. Promising
11. Cannot Lose Them

#### 2.2.2. Distribution of Customer Across Segment
"""

custom_order = ['Champions', 'Loyal', 'Potential Loyalist', 'New Customers', 'Promising', 'Need Attention', 'About To Sleep', 'At Risk', 'Cannot Lose Them', 'Hibernating Customers', 'Lost Customers']
RFM_calc_2['CustomerSegment'] = pd.Categorical(RFM_calc_2['CustomerSegment'], categories=custom_order, ordered=True)
plt.figure(figsize=(18, 7))
RFM_calc_2['CustomerSegment'].value_counts().sort_index().plot(kind='bar', color='#0fbb98')
for i, value in enumerate(RFM_calc_2['CustomerSegment'].value_counts().sort_index()):
    plt.text(i, value + 2, str(value), ha='center', va='bottom')
plt.title('Distribution of Customers Across Segments',  fontdict={'fontsize': 20, 'fontweight': 'bold'}, loc='center', pad=12)
plt.xlabel('')
plt.ylabel('')
plt.xticks(rotation=45, ha='right')
plt.yticks([])
plt.show()

HVC = RFM_calc_2['CustomerSegment'].value_counts()[['Champions', 'Loyal', 'Potential Loyalist', 'New Customers', 'Promising']].sum()
ARC = RFM_calc_2['CustomerSegment'].value_counts()[['Need Attention', 'About To Sleep', 'At Risk', 'Cannot Lose Them']].sum()
LVC = RFM_calc_2['CustomerSegment'].value_counts()[['Hibernating Customers', 'Lost Customers']].sum()
print(f"High-Value Customers: {HVC}")
print(f"At-Risk Customers: {ARC}")
print(f"Low-Value Customers: {LVC}")

"""**Interpretation:**
1. Categorizing the customer segments into 3 groups:
- High-Value Customers (HVC): Champions, Loyal, Potential Loyalist, New Customers, Promising.
- At-Risk Customers (ARC): Need Attention. About To Sleep, At Risk, Cannot Lose Them.
- Low-Value Customers (LVC): Hibernating Customers, Lost Customers.
2. Observation:
- HVC category contributes the most, with 1871 customers.
- LVC category contributes the second - 1075 customers, even with only 2 segments included.
- ARC category, while the smallest, still contributes a considerable amount of 974 customers.

#**V. Insight**

Link Insight: https://docs.google.com/spreadsheets/d/1MBt3b48lT-RzD44xsbMsgwtVO-JmIJjU/edit?usp=sharing&ouid=107825711284033293753&rtpof=true&sd=true
"""
